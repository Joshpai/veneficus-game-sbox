@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

@if (!Movement.LevelStarted) return;

<root>
	<!-- TODO: think more about this, centered is wrong as camera != player forward
	<div class="crosshair-container">
		<div class="crosshair"></div>
	</div>
	-->

	<div class="health">
		<div class="flask-container">
			<div class="flask-tip"></div>
			<div class="flask-orb">
				<div class="liquid-container">
					<div class="liquid"
						 style="height: @(100.0f * Health.Health / Health.MaxHealth)%;"></div>
					<div class="liquid-overlay radial-gradient"></div>
					<div class="liquid-overlay linear-gradient"></div>
					<!-- <div class="liquid-overlay underlight"></div> -->
				</div>
				<div class="value-container">
					<div class="value">@MathF.Ceiling(Health.Health)</div>
				</div>
			</div>
		</div>
	</div>

	<div class="spells-container">
		<div class="spells">
			@for (int i = (int)BaseSpell.SpellType.SpellTypeMin + 1;
				  i < (int)BaseSpell.SpellType.SpellTypeMax; i++)
			{
				var spellType = (BaseSpell.SpellType)i;

				if (!Spellcasting.IsSpellUnlocked(spellType))
					continue;

				var active = ((int)Spellcasting.ActiveSpell == i)
						   ? "active" : "inactive";
				var spellXpAmount = (100.0f * i) / (float)(BaseSpell.SpellType.SpellTypeMax);
				var xpCol = "red";
				var cooldownCol = "rgba(0, 0, 0, 0.9)";
				//var cooldownAmount = 100.0f - (100.0f * i) / (float)(BaseSpell.SpellType.SpellTypeMax);
				var cooldownAmount = Spellcasting.GetSpellCooldownPercent(spellType);
				// Invert the cooldown (so we rotate counter-clockwise) and scale
				cooldownAmount = 100.0f * (cooldownAmount);
				// Short cooldowns look silly, so just don't render them.
				if (Spellcasting.GetSpellCooldownMax(spellType) < 0.1f)
					cooldownAmount = 0.0f;
				// If the spell is blocked, then show this as a max cooldown
				if (Spellcasting.IsSpellBlocked(spellType))
					cooldownAmount = 100.0f;

				var cost = Spellcasting.GetSpellCost(spellType);

				<!-- Outer circle shows XP, Inner darkened shows cooldown,
					 roman numberal inside shows level. Mana cost? -->
				<!-- TODO: visualise spell charge up time? -->
				<div class="spell @active">
					<div class="xp"
						 style="background-image:
							conic-gradient(@xpCol 0%, @xpCol @spellXpAmount%,
										   transparent @spellXpAmount%)">
						<div class="spell-internal-wrapper">
							<div>@spellType</div>
							<!-- <div>Spell Image @i</div> -->
							<div class="spell-level">III</div>
							<div class="cooldown"
								 style="background-image:
									conic-gradient(@cooldownCol 0%,
												   @cooldownCol @cooldownAmount%,
												   transparent @cooldownAmount%)">
							</div>
						</div>
					</div>
				</div>
			}
		</div>
	</div>

	<div class="mana-container">
		<div class="mana-wrapper"
			 style="height: @(1.5f * Spellcasting.MaxMana)px">
			<!-- Simple mana bar (vertical), changes colour depending on mana -->
			<div class="mana"
				 style="height: @(1.5f * Spellcasting.Mana)px">
			</div>
		</div>
	</div>
</root>

@code
{
	[Property]
	public HealthComponent Health { get; set; }

	[Property]
	public PlayerMovementController Movement { get; set; }

	[Property]
	public PlayerSpellcastingController Spellcasting { get; set; }

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() =>
		System.HashCode.Combine(
			Health.Health,
			Spellcasting.Mana,
			Spellcasting.ActiveSpell,
			Spellcasting.GetSpellCooldown(BaseSpell.SpellType.Fireball) +
			Spellcasting.GetSpellCooldown(BaseSpell.SpellType.Polymorph) +
			Spellcasting.GetSpellCooldown(BaseSpell.SpellType.MagicMissile) +
			Spellcasting.GetSpellCooldown(BaseSpell.SpellType.RendingGale) +
			Spellcasting.GetSpellCooldown(BaseSpell.SpellType.MagicBarrier) +
			Spellcasting.GetSpellCooldown(BaseSpell.SpellType.RockArmour) +
			Spellcasting.GetSpellCooldown(BaseSpell.SpellType.LightningStrike) +
			Spellcasting.GetSpellCooldown(BaseSpell.SpellType.WaterBeam),
			Movement.LevelStarted
		);
}
