@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<div class="container-wrapper">
		<div class="container">
			<div class="title-wrapper">
				<div class="title">Level Summary</div>
			</div>
			<div class="stats">
				<div class="stat">
					<div class="stat-name">Completion Time</div>
					<div class="stat-data">
						<div class="stat-value">@CompletionTime</div>
						<div class="stat-target"></div>
						<div class="stat-rank">(@CompletionTimeRank)</div>
					</div>
				</div>
				<div class="stat">
					<div class="stat-name">Enemies Killed</div>
					<div class="stat-data">
						<div class="stat-value">@EnemiesKilled</div>
						<div class="stat-slash">/</div>
						<div class="stat-target">@MaxEnemies</div>
						<div class="stat-rank">(@EnemiesKilledRank)</div>
					</div>
				</div>
				<div class="stat">
					<div class="stat-name">Deaths</div>
					<div class="stat-data">
						<div class="stat-value">@DeathCount</div>
						<div class="stat-target"></div>
						<div class="stat-rank">(@DeathRank)</div>
					</div>
				</div>
			</div>
			<div class="challenge">
				<div class="challenge-title">
					<div class="challenge-name">Challenge</div>
					<div class="challenge-completed @(
						ChallengeCompleted ? "complete" : "incomplete"
					)">
						@(ChallengeCompleted ? "Completed" : "Incomplete")
					</div>
				</div>
				<div class="challenge-description">@ChallengeDescription</div>
			</div>
			<div class="secrets">
				@for (var i = 0; i < SecretCount; i++)
				{
					var collected = (((1 << i) & SecretCollectedBitmask) != 0)
								  ? "collected" : "missed";
					<div class="secret @collected"></div>
				}
			</div>
			<div class="rank">
				<div class="rank-name">Final Rank</div>
				<div class="rank-value">@FinalRank</div>
			</div>
			<div class="buttons">
				<button onclick=@( () => OnRetryLevel?.Invoke() )>
					&#10226; Retry
				</button>
				<button onclick=@( () => OnMainMenu?.Invoke() )>
					&#119064; Menu
				</button>
				<button onclick=@( () => OnNextLevel?.Invoke() )>
					Next Level &#8594;
				</button>
			</div>
		</div>
	</div>
</root>

@code
{
	[Property]
	public String CompletionTime { get; set; } = "00:00.000";
	[Property]
	public String CompletionTimeRank { get; set; } = "D";

	[Property]
	public int EnemiesKilled { get; set; } = 0;
	[Property]
	public int MaxEnemies { get; set; } = 0;
	[Property]
	public String EnemiesKilledRank { get; set; } = "D";

	[Property]
	public int DeathCount { get; set; } = 0;
	[Property]
	public String DeathRank { get; set; } = "D";

	[Property, TextArea]
	public String ChallengeDescription { get; set; } = "";
	[Property]
	public bool ChallengeCompleted { get; set; } = false;

	[Property]
	public String FinalRank { get; set; } = "D";

	[Property]
	public int SecretCount { get; set; } = 0;
	[Property]
	public uint SecretCollectedBitmask { get; set; } = 0;

	[Property]
	public Action OnRetryLevel { get; set; }
	[Property]
	public Action OnMainMenu { get; set; }
	[Property]
	public Action OnNextLevel { get; set; }

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() =>
		System.HashCode.Combine(
			FinalRank
		);
}
